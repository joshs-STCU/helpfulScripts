# This is a basic workflow to help you get started with Actions

name: "Version Labeler"

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Label:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    permissions:
        # this runner will add labels/tags to commits and pull requests
        contents: write
        pull-requests: write
        

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        shell: pwsh
        run: |
            git fetch --tags
            Write-Output "Checking if latest commit is already tagged..."
            $ExistingTagCheck = git tag --points-at HEAD
            $branch = git branch --show-current
            
            $Continue = $true
            if ($ExistingTagCheck -match 'v\d{4}\.\d{1}\.\d+?'){
                Write-Output "Tag exists for commit."
                if ($branch -eq "main" -and $ExistingTagCheck -like "*-Release") {
                    Write-Output "Tagged commit moved to release: tagging commit as relase."
                }
                else {
                    Write-Output "Commit is alreay tagged and not merged into Release branch: will not add another tag."
                    $Continue = $false
                }
            }

            if ($Continue){
                $CurrentYear = (Get-Date).Year
                $CurrentQuarter = [math]::Ceiling((get-Date).Month/3)
                
                Write-Output "Attempting to get highest version tag from git."
                git fetch --tags
                $tags = git tag -l | Where-Object {$_ -match 'v\d{4}\.\d{1}\.\d+?'} | Sort-Object {(($_ -replace 'v') -replace '-.+$') -as [version]} | Select-Object -Last 1
                
                if ($null -eq $tags) {
                    Write-Output "No tags detected: setting defaults..."
                    $Year = 1900
                    $Quarter = 1 
                    $Build = 0
                } else {
                    Write-Output "Tag detected: setting values..."
                    $tags = $tags.Split('.')
                    $Year = [int]($tags[0] -replace 'v', '')
                    $Quarter = [int]$tags[1]
                    if ($tags[2].IndexOf('-') -gt 0) {
                        $Build = [int]$tags[2].Substring(0, $tags[2].IndexOf('-'))
                    }
                    else {
                        $Build = [int]$tags[2]
                    }
                }
                
                if ($Year -lt $CurrentYear) {
                    Write-Output "Years don't match: Resetting all values"
                    $Year = $CurrentYear
                    $Quarter = $CurrentQuarter
                    $Build = 1
                }
                elseif ($Year -eq $CurrentYear -and $Quarter -lt $CurrentQuarter) {
                    Write-Output "Quarters don't match: Resetting quarter and build values."
                    $Quarter = $CurrentQuarter
                    $Build = 1
                }
                else {
                    Write-Output "Incrementing build value."
                    $Build += 1
                }
                
                $newTag = "v$($CurrentYear).$($CurrentQuarter).$($Build)"
                
                if ($branch.Length -gt 0) {
                    if($branch -eq "main") { 
                        $branch = 'Release'
                    }
                    $newTag += "-$($branch)"
                }
                
                Write-Output "Adding tag: $($newTag)"
                git tag $newTag
                git push --tags
            }
